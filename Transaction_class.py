from web3 import Web3,HTTPProvider
import json

ganache_url = "http://127.0.0.1:7545"  # call the smart contract in the blockchain
web3 = Web3(Web3.HTTPProvider(ganache_url)) # instantiate web3 connection
print("web3 is connected:", web3.isConnected()) #confirm if ganache is connected

def get_transactions():
        self.nonce = Nonce
        self.chainId = ChainId
        self.gasPrice = GasPrice
        self.amount = Amonut
abi = json.loads('[ { "anonymous": false, "inputs": [ { "indexed": false, "internalType": "address", "name": "from", "type": "address" }, { "indexed": false, "internalType": "address", "name": "receiver", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }, { "indexed": false, "internalType": "string", "name": "message", "type": "string" } ], "name": "Transfer", "type": "event" }, { "inputs": [ { "internalType": "address payable", "name": "receiver", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "string", "name": "signature", "type": "string" } ], "name": "createOperation", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" } ], "name": "transfer", "outputs": [ { "internalType": "bool", "name": "", "type": "bool" } ], "stateMutability": "view", "type": "function" } ]')
bytecode = '608060405234801561001057600080fd5b506107b0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806317a4b8ec1461003b5780637d20368d1461006b575b600080fd5b610055600480360381019061005091906103c2565b610087565b60405161006291906104f2565b60405180910390f35b61008560048036038101906100809190610353565b610090565b005b60009392505050565b600160405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030190805190602001906101bc929190610201565b5050507fcd6e659e4c2e75c3bfe47fecaccf39aeb368116a0ee52afb532e07f6cba6c0d1338484846040516101f494939291906104a6565b60405180910390a1505050565b82805461020d9061064f565b90600052602060002090601f01602090048101928261022f5760008555610276565b82601f1061024857805160ff1916838001178555610276565b82800160010185558215610276579182015b8281111561027557825182559160200191906001019061025a565b5b5090506102839190610287565b5090565b5b808211156102a0576000816000905550600101610288565b5090565b60006102b76102b284610532565b61050d565b9050828152602081018484840111156102d3576102d2610715565b5b6102de84828561060d565b509392505050565b6000813590506102f581610735565b92915050565b60008135905061030a8161074c565b92915050565b600082601f83011261032557610324610710565b5b81356103358482602086016102a4565b91505092915050565b60008135905061034d81610763565b92915050565b60008060006060848603121561036c5761036b61071f565b5b600061037a868287016102fb565b935050602061038b8682870161033e565b925050604084013567ffffffffffffffff8111156103ac576103ab61071a565b5b6103b886828701610310565b9150509250925092565b6000806000606084860312156103db576103da61071f565b5b60006103e9868287016102e6565b93505060206103fa8682870161033e565b925050604084013567ffffffffffffffff81111561041b5761041a61071a565b5b61042786828701610310565b9150509250925092565b61043a816105d7565b82525050565b6104498161057f565b82525050565b610458816105a3565b82525050565b600061046982610563565b610473818561056e565b935061048381856020860161061c565b61048c81610724565b840191505092915050565b6104a0816105cd565b82525050565b60006080820190506104bb6000830187610440565b6104c86020830186610431565b6104d56040830185610497565b81810360608301526104e7818461045e565b905095945050505050565b6000602082019050610507600083018461044f565b92915050565b6000610517610528565b90506105238282610681565b919050565b6000604051905090565b600067ffffffffffffffff82111561054d5761054c6106e1565b5b61055682610724565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061058a826105ad565b9050919050565b600061059c826105ad565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105e2826105e9565b9050919050565b60006105f4826105fb565b9050919050565b6000610606826105ad565b9050919050565b82818337600083830152505050565b60005b8381101561063a57808201518184015260208101905061061f565b83811115610649576000848401525b50505050565b6000600282049050600182168061066757607f821691505b6020821081141561067b5761067a6106b2565b5b50919050565b61068a82610724565b810181811067ffffffffffffffff821117156106a9576106a86106e1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61073e8161057f565b811461074957600080fd5b50565b61075581610591565b811461076057600080fd5b50565b61076c816105cd565b811461077757600080fd5b5056fea2646970667358221220c8e2b70e2db0db8874593b5101a91a6217aa8a50b8783859ec9a86e7029a80e464736f6c63430008070033'

createOperation = web3.eth.contract(abi=abi, bytecode = bytecode )

wallet = "0xaa7b6933D1AabeB245c7320a590E234c38C6ec7D" # address value at index 1 in the ganache.

nonce = web3.eth.getTransactionCount(wallet)
amount = 10
print("nonce:", nonce)

transaction = createOperation.constructor().buildTransaction(
{
        "gasPrice": web3.eth.gas_price,
         "from": wallet,
        "nonce":nonce,
        "amount": amount
}
)
print(transaction)